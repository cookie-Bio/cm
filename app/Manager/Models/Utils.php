<?php

namespace Manager\Models;

use DateTime;
use DateTimeZone;
use Exception;

class Utils
{
    const FORMAT_TIME = 'Y-m-d H:i';

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–æ—Ç–∏–Ω–∫–∞–º–∏
     * @param string $api
     * @return mixed
     */
    public static function snowCat($api = 'https://aws.random.cat/meow'): mixed
    {
        return json_decode(file_get_contents($api));
    }

    /**
     * –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
     * @param $str
     * @return string
     */
    public static function translit(string $str): string
    {
        $tr = array(
            "–ê" => "A", "–ë" => "B", "–í" => "V", "–ì" => "G",
            "–î" => "D", "–ï" => "E", "–ñ" => "J", "–ó" => "Z", "–ò" => "I",
            "–ô" => "Y", "–ö" => "K", "–õ" => "L", "–ú" => "M", "–ù" => "N",
            "–û" => "O", "–ü" => "P", "–†" => "R", "–°" => "S", "–¢" => "T",
            "–£" => "U", "–§" => "F", "–•" => "H", "–¶" => "TS", "–ß" => "CH",
            "–®" => "SH", "–©" => "SCH", "–™" => "", "–´" => "YI", "–¨" => "",
            "–≠" => "E", "–Æ" => "YU", "–Ø" => "YA", "–∞" => "a", "–±" => "b",
            "–≤" => "v", "–≥" => "g", "–¥" => "d", "–µ" => "e", "–∂" => "j",
            "–∑" => "z", "–∏" => "i", "–π" => "y", "–∫" => "k", "–ª" => "l",
            "–º" => "m", "–Ω" => "n", "–æ" => "o", "–ø" => "p", "—Ä" => "r",
            "—Å" => "s", "—Ç" => "t", "—É" => "u", "—Ñ" => "f", "—Ö" => "h",
            "—Ü" => "ts", "—á" => "ch", "—à" => "sh", "—â" => "sch", "—ä" => "y",
            "—ã" => "yi", "—å" => "'", "—ç" => "e", "—é" => "yu", "—è" => "ya"
        );
        return strtr($str, $tr);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–∞–º—É—é –ø–µ—Ä–≤—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É
     * @param $text
     * @return string
     */
    public static function removeFirstWord($text): string
    {
        return strstr($text, " ");
    }

    /**
     * –í—ã–±–æ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–ª—é—á—É
     * @param string $string
     * @param int $substring
     * @return string|bool
     */
    public static function getWord(string $string, int $substring): string|bool
    {
        $substrings = explode(' ', $string);
        return $substrings[$substring] ?? false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
     * @param string $textFromArray
     * @param string $original
     * @param int $similarPercent
     * @return bool
     */
    public static function formatText(string $textFromArray, string $original, $similarPercent = 80): bool
    {
        if (mb_substr($textFromArray, 0, 1) == '|') {
            return self::similarTo($textFromArray, $original) >= $similarPercent;
        } elseif (mb_substr($textFromArray, 0, 2) == "[|") {
            return self::startAs($textFromArray, $original);
        } elseif (mb_substr($textFromArray, -2, 2) == "|]") {
            return (self::endAs($textFromArray, $original));
        } elseif (mb_substr($textFromArray, 0, 1) == "{" && mb_substr($textFromArray, -1, 1) == "}") {
            return (self::contains($textFromArray, $original));
        } else return $textFromArray == $original;
    }

    /**
     * –ü–æ—Ö–æ–∂–µ –Ω–∞
     * @param string $text
     * @param $original
     * @return int
     */
    public static function similarTo(string $text, $original): int
    {
        similar_text($text, $original, $percent);
        return (int)$percent;
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å
     * @param string $text
     * @param $original
     * @return bool
     */
    private static function startAs(string $text, $original): bool
    {
        $word = explode(' ', $text)[0];
        $wordFromBot = explode(' ', $original)[0];
        return mb_substr($word, 2) == $wordFromBot;
    }

    /**
     * –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞
     * @param string $text
     * @param string $original
     * @return bool
     */
    private static function endAs(string $text, string $original): bool
    {
        $word = explode(' ', $text);
        $end_word = end($word);

        $word_wp = mb_substr($end_word, 0, mb_strlen($end_word) - 2);

        $wordFromBot = explode(' ', $original);

        return $word_wp == end($wordFromBot) and ($word_wp != $wordFromBot[0]);
    }

    /**
     * –°–æ–¥–µ—Ä–∂–∏—Ç
     * @param string $text
     * @param string $original
     * @return bool
     */
    private static function contains(string $text, string $original): bool
    {
        return mb_stripos($original, $text) !== false;
    }

    /**
     * –ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–π explode —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
     * @param $delimiters
     * @param $string
     * @return array|bool
     */
    public static function multiExplode($delimiters, $string): array|bool
    {
        $ready = str_replace($delimiters, $delimiters[0], $string);
        return explode($delimiters[0], $ready);
    }

    /**
     * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–º
     * @param array $arr
     * @return bool
     */
    public static function isAssoc(array $arr): bool
    {
        if ([] === $arr) return false;
        return array_keys($arr) !== range(0, count($arr) - 1);
    }

    /**
     * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º
     * @param array $arr
     * @return bool
     */
    public static function isSeq(array $arr): bool
    {
        if ([] === $arr) return false;
        return array_keys($arr) === range(0, count($arr) - 1);
    }

    /**
     * –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–∏–≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–º
     * @param array $array
     * @return bool
     */
    public static function isMulti(array $array): bool
    {
        $rv = array_filter($array, 'is_array');
        if (count($rv) > 0) return true;
        return false;
    }

    /**
     * –†–µ–≥—É–ª—è—Ä–∫–∞ —á—Ç–æ–± –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∞–π–¥–∏—à–Ω–∏–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
     * @param string $string
     * @return array|bool
     */
    public static function regexId(string $string): array|bool
    {
        preg_match_all('/\[(?:id|club)([0-9]*)\|.*?]/', $string, $match);
        return $match[1];
    }

    /**
     * –í–æ—Ç —ç—Ç–æ —è –Ω–µ –æ—Å–æ–±–æ –ø–æ–º–Ω—é —á—Ç–æ –∑–∞ —Ö—É—ë–≤–∏–Ω–∞
     * @return array
     */
    public static function turingTest()
    {
        $firstNum = rand(1, 10);
        $secondNum = rand(1, 10);
        $thirdNum = rand(1, 10);
        $fourthNum = rand(1, 5);

        $text = $firstNum . ' + ' . $secondNum . ' - ' . $thirdNum . ' * ' . $fourthNum;
        $sum = $firstNum + $secondNum - $thirdNum * $fourthNum;

        $invalidSum[] = $sum - rand(1, 10);
        $invalidSum[] = $sum + rand(1, 10);
        $invalidSum[] = $sum - rand(1, 10);
        $invalidSum[] = $sum;
        // $invalidSum[] = $sum + \rand(1, 10);

        shuffle($invalidSum);

        return ['array' => $invalidSum, 'result' => $sum, 'text' => $text];
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π –¥–µ–±–∞–≥ –≤ stdout
     * @param $data
     */
    public static function var_dumpToStdout($data)
    {
        file_put_contents('php://stdout', print_r($data, true));
    }

    /**
     * –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –Ω–∏–∫–æ–≤
     * @param $string
     * @return bool
     */
    public static function regexNickName($string): bool
    {
        return preg_match('/^[a-zA-Z0-9–ê-–Ø–∞-—è_-]{1,16}$/u', $string, $match) ?? false;
//        return preg_match('/([a-zA-Z0-9–ê-–Ø–∞-—è_-]{1,16})+/u', $string, $match) ?? false;
    }

    /**
     * –ë—É–ª–µ–≤ –≤ —Å–º–∞–π–ª—ã
     * @param $bool
     * @return string
     */
    public static function boolToSmile($bool): string
    {
        $logic[0] = '‚õî';
        $logic[1] = '‚úÖ';

        return $logic[(bool)$bool];
    }

    /**
     * DateTime
     * –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ï–≤—Ä–æ–ø–∞/–ú–æ—Å–∫–≤–∞
     * @param $now
     * @return DateTime
     * @throws Exception
     */
    public static function datetime($now = null): DateTime
    {
        return new DateTime($now, new DateTimeZone('Europe/Moscow'));
    }

    /**
     * –°—Ç—Ä–æ–∫–∞ –≤ unixtime
     * 1 —á–∞—Å
     * unixtime + 3600
     * @param string $string
     * @return int|false
     */
    public static function strTime(string $string): int|false
    {
        $exp = explode(' ', $string);
        $strtime = end($exp);
        $prev = prev($exp);

        $int = intval($prev);
//        $str = trim($prev . ' ' . self::remove_numbers($strtime));

        return match ($strtime) {
            '—Å', '—Å–µ–∫', '—Å–µ–∫—É–Ω–¥', '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', 's', 'second', 'seconds' => time() + (1 * $int),
            '–º', '–º–∏–Ω', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', 'm', 'minute', 'minutes' => time() + (60 * $int),
            '—á', '—á–∞—Å', '—á–∞—Å–æ–≤', '—á–∞—Å–∞', 'hour', 'hours' => time() + (3600 * $int),
            '–¥', '–¥–Ω', '–¥–Ω–µ–π', '–¥–Ω—è', 'd', 'day', 'days' => time() + (86400 * $int),
            default => false,
        };
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–µ
     * const NO_ACTION = 0;
     * const WARN_ACTION = 1;
     * const KICK_ACTION = 2;
     * const BAN_ACTION = 3;
     * const SHOW_ACTION = 4;
     * @param int|null $int $int
     * @return string|null
     */
    public static function intToStringAction(int|null $int): null|string
    {
        $array[0] = '¬Ø\_(„ÉÑ)_/¬Ø';
        $array[1] = '‚ö† –í–∞—Ä–Ω';
        $array[2] = 'üö∑ –ö–∏–∫';
        $array[3] = 'üöØ –ë–∞–Ω';
        $array[4] = 'üîî –ü–æ–∫–∞–∑–∞—Ç—å';

        return $array[$int] ?? null;
    }
}